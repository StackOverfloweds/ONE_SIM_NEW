/*
 * @(#)PeopleRank.java
 *
 * Copyright 2024 by Bryan (HaiPigGi)
 * 
 */

package routing.community;

import java.util.*;
import java.util.Iterator;
import core.*;
import routing.DecisionEngineRouter;
import routing.MessageRouter;
import routing.RoutingDecisionEngine;
import core.Tuple;

/*
 * PeopleRank
 *
 * PeopleRank is a ranking-based routing decision engine that calculates the importance or centrality of nodes (hosts)
 * within a network by considering the social connections between them. It assigns each node a score (PeopleRank value)
 * based on its connections to other nodes, with higher scores indicating greater importance or influence.
 * This algorithm is particularly suitable for routing in mobile ad hoc networks (MANETs) and Delay Tolerant Networks (DTNs),
 * where traditional routing protocols may not be efficient due to frequent network disruptions and dynamic topology changes.
 *
 * As a ranking-based routing decision engine, PeopleRank utilizes the calculated PeopleRank values to make routing decisions.
 * Messages are routed to nodes with higher PeopleRank values, which are considered to be more central or influential in the network.
 * This helps improve message delivery efficiency, especially in scenarios where traditional routing strategies may not be effective.
 *
 * PeopleRank implementation consists of two main components:
 * 1. Calculation of PeopleRank values for each node in the network.
 * 2. Routing decision based on PeopleRank values to optimize message delivery.
 *
 * The PeopleRank algorithm iteratively computes PeopleRank values for each node by considering the influence
 * of neighboring nodes in the network. The process continues until convergence, where the change in PeopleRank
 * values between iterations falls below a predefined threshold.
 *
 * PeopleRank can be customized with parameters such as damping factor, maximum iterations, and convergence
 * threshold to control the algorithm's behavior and performance. These parameters allow users to fine-tune
 * PeopleRank for specific network characteristics and application requirements.
 *
 * PeopleRank is suitable for various applications, including opportunistic routing in intermittently connected
 * networks, social network analysis, and ranking-based decision making in online social networks.
 *
 * @author Bryan (HaiPigGi)
 * @since 2024
 * 
 */


public class PeopleRank implements RoutingDecisionEngine {

    // Initialitation variable
    /** Dumping Factor to employ -setting id {@value} */
    public static final String DUMPING_FACTOR_SETTING = "dumpingFactor";

    // Data structures for storing connection history and PeopleRank values
    Map<DTNHost, List<Set<DTNHost>>> connHistory;
    /**
     * to save formula |F(Nj)| = Total Friend other node PeR(Nj) = Ranking other
     * node
     * 
     * @param per
     */
    Map<DTNHost, Tuple<Double, Integer>> per = new HashMap<>();;

    // Community detection and damping factor
    protected double dumpingFactor; // Damping factor used in the PeopleRank algorithm

    /**
     * Constructor for PeopleRank based on the specified settings.
     * 
     * @param s The settings object containing configuration parameters
     */
    public PeopleRank(Settings s) {
        if (s.contains(DUMPING_FACTOR_SETTING))
            dumpingFactor = s.getDouble(DUMPING_FACTOR_SETTING);
        else
            this.dumpingFactor = 0.75;

        connHistory = new HashMap<>();
    }

    /**
     * Copy constructor for PeopleRank.
     * 
     * @param r The PeopleRank object to replicate
     */
    public PeopleRank(PeopleRank r) {
        // Replicate damping factor
        this.dumpingFactor = r.dumpingFactor;
        // Initialize a new connection history map
        this.connHistory = new HashMap<>();
    }

    @Override
    public void connectionDown(DTNHost thisHost, DTNHost peer) {
        // Find or create the connection history list for thisHost
        List<Set<DTNHost>> thisHostHistory;
        if (!connHistory.containsKey(thisHost)) {
            thisHostHistory = new LinkedList<>(); // Create a new list for connection history
            connHistory.put(thisHost, thisHostHistory);
        } else {
            thisHostHistory = connHistory.get(thisHost);
        }

        // Add the disconnected peer to the connection history of this host
        Set<DTNHost> disconnectedSet = new HashSet<>();
        disconnectedSet.add(peer);
        thisHostHistory.add(disconnectedSet);

        // Find or create the connection history list for peer
        List<Set<DTNHost>> peerHistory;
        if (!connHistory.containsKey(peer)) {
            peerHistory = new LinkedList<>(); // Create a new list for connection history
            connHistory.put(peer, peerHistory);
        } else {
            peerHistory = connHistory.get(peer);
        }

        // Add thisHost to the connection history of peer
        Set<DTNHost> thisHostSet = new HashSet<>();
        thisHostSet.add(thisHost);
        peerHistory.add(thisHostSet);
    }

    @Override
    public void connectionUp(DTNHost thisHost, DTNHost peer) {}

    /*
     * This method is responsible for updating the ranking of nodes after a new
     * connection is established.
     * 
     */
    @Override
    public void doExchangeForNewConnection(Connection con, DTNHost peer) {
        // Get the local host from the connection
        DTNHost myHost = con.getOtherNode(peer);
        // Get the PeopleRank decision engine of the remote host (peer)
        PeopleRank de = this.getOtherDecisionEngine(peer);

        // Check if myHost is in the connection history
        if (connHistory.containsKey(myHost)) {
            // Get the connection history for myHost
            List<Set<DTNHost>> connectionHistory = connHistory.get(myHost);

            // Iterate through the connection history
            for (Set<DTNHost> contactSet : connectionHistory) {
                // If myHost has met with peer
                if (contactSet.contains(peer)) {
                    // Update the ranking for every node connected to myHost
                    for (DTNHost connectedHost : contactSet) {
                        // Calculate and update PeopleRank for connectedHost using the de object
                        double updatedPer = de.calculatePer(connectedHost); // Using the calculatePer method from the de
                                                                            // object
                        Tuple<Double, Integer> existingInfo = de.per.get(connectedHost); // Using the per from the de
                                                                                         // object
                        if (existingInfo != null) {
                            // Update the PeopleRank value
                            existingInfo.setKey(updatedPer);
                        } else {
                            // Add new information if not present in the map
                            de.per.put(connectedHost, new Tuple<>(updatedPer, 0));
                        }
                    }
                    // Exit the loop after finding the connection with peer
                    break;
                }
            }
        }
    }

    @Override
    public boolean isFinalDest(Message m, DTNHost aHost) {
        return m.getTo() == aHost;
    }

    @Override
    public boolean newMessage(Message m) {
        return true;
    }

    @Override
    public RoutingDecisionEngine replicate() {
        return new PeopleRank(this);
    }

    @Override
    public boolean shouldDeleteOldMessage(Message m, DTNHost hostReportingOld) {
        return m.getTo() == hostReportingOld;
    }

    @Override
    public boolean shouldDeleteSentMessage(Message m, DTNHost otherHost) {
        return false;
    }

    @Override
    public boolean shouldSaveReceivedMessage(Message m, DTNHost thisHost) {
        return m.getTo() != thisHost;
    }

    /**
     * Determines whether a message should be sent from this host to another host
     * based on the PeopleRank routing algorithm.
     * 
     * @param m         The message to be sent.
     * @param thisHost  The current host from which the message originates.
     * @param otherHost The destination host to which the message should be sent.
     * @return True if the message should be sent to the other host, false
     *         otherwise.
     */
    @Override
    public boolean shouldSendMessageToHost(Message m, DTNHost otherHost, DTNHost thisHost) {
        // Check if the destination of the message is the other host
        if (m.getTo() == otherHost) {
            return true; // Message should be sent directly to the destination
        }
        // Calculate PeopleRank for this host and other host
        double perThisHost = calculatePer(thisHost);
        double perOtherHost = calculatePer(otherHost);

        // Check if this host is in contact with the other host
        if (connHistory.containsKey(otherHost)) {
            // Iterate over the connection history of the other host
            Iterator<Set<DTNHost>> iterator = connHistory.get(otherHost).iterator();
            while (iterator.hasNext()) {
                Set<DTNHost> contactSet = iterator.next();
                // If other host is in contact with this host
                if (contactSet.contains(thisHost)) {
                    // System.out.println("its contact " + contactSet + " with this host : " +
                    // thisHost);
                    // If PeopleRank of other host is greater than or equal to this host
                    if (perOtherHost >= perThisHost) {
                        return true; // Send message to other host
                    } else { // When j is not in F(i)
                        return false; // Do not send message to other host

                    }
                }

            }

        }

        // If the destination host is not in contact with the current host, check the
        Buffer messageBuffer = new Buffer(); // Instantiate Buffer with settings
        int bufferSize = messageBuffer.getBufferSize(thisHost);
        Iterator<Message> bufferIterator = messageBuffer.iterator(); // Get iterator for messages in buffer
        while (bufferSize > 0 && bufferIterator.hasNext()) {
            Message bufferedMessage = bufferIterator.next(); // Get the next message from the buffer
            if (perOtherHost >= perThisHost || otherHost.equals(bufferedMessage.getTo())) {
                return true; // Condition met, return true
            }

        }
        return false; // Otherwise, do not send the message to other host

    }

    /**
     * Calculates the PeopleRank for a given host based on the formula:
     * PeR(Ni) = (1 - d) + d * Σ PeR(Nj) / |F(Nj)|
     * 
     * Where:
     * - PeR(Ni) is the PeopleRank for the current host.
     * - d is the damping factor obtained from the setting. If not specified, it
     * defaults to 0.75.
     * - PeR(Nj) is the ranking of other connected nodes (friends).
     * - |F(Nj)| is the total number of friends of other nodes.
     * 
     * @param host The host for which to calculate the PeopleRank.
     * @return The PeopleRank for the specified host.
     */
    private double calculatePer(DTNHost host) {
        // Obtain the damping factor from the setting
        double dampingFactor = this.dumpingFactor;

        double sum = 0.0; // Initialize the sum

        // Get the connection history for the host
        List<Set<DTNHost>> connectionHistory = connHistory.get(host);

        // Check if connectionHistory is null or empty
        if (connectionHistory == null || connectionHistory.isEmpty()) {
            return 0.0; // Return 0 if there's no connection history
        }

        // Iterate over the connection history to calculate the sum
        for (Set<DTNHost> friendList : connectionHistory) {
            for (DTNHost friend : friendList) {
                Tuple<Double, Integer> friendInfo = per.get(friend);
                if (friendInfo != null && friendInfo.getValue() != 0) {
                    sum += friendInfo.getKey() / friendInfo.getValue();

                    // Manual example for sum
                    // Sebelum operasi:
                    // sum = 1.0
                    // friendInfo.getKey() = 0.5
                    // friendInfo.getValue() = 2

                    // Langkah 1:
                    // Nilai yang akan ditambahkan = friendInfo.getKey() / friendInfo.getValue() =
                    // 0.5 / 2 = 0.25

                    // Langkah 2:
                    // Operasi penambahan:
                    // sum = sum +(nilai yang akan ditambahkan)
                    // = 1.0 + 0.25
                    // = 1.25

                    // Setelah operasi:
                    // sum = 1.25
                }
            }
        }

        // Calculate the PeopleRank for the host based on the formula
        return (1 - dampingFactor) + dampingFactor * sum;
    }

    @Override
    public void update(DTNHost thisHost) {
    }

    private PeopleRank getOtherDecisionEngine(DTNHost h) {
        MessageRouter otherRouter = h.getRouter();
        assert otherRouter instanceof DecisionEngineRouter : "This router only works "
                + " with other routers of same type";

        return (PeopleRank) ((DecisionEngineRouter) otherRouter).getDecisionEngine();
    }
}



  // Check if the destination of the message is the other host
        if (m.getTo() == otherHost) {
            return true; // Message should be sent directly to the destination
        }
        // Calculate PeopleRank for this host and other host
        double perThisHost = calculatePer(thisHost);
        double perOtherHost = calculatePer(otherHost);
        // Inisialisasi F(i) sebagai himpunan teman-teman dari i
        Set<DTNHost> Fi = new HashSet<>(connHistory.keySet());
        Fi.add(thisHost);
        // System.out.println("cek this host : "+Fi);

        // Check if this host is in contact with the other host
        if (connHistory.containsKey(otherHost)) {
            List<Set<DTNHost>> connectedHost = new ArrayList<>();
            for (Map.Entry<DTNHost, List<Duration>> entry : connHistory.entrySet()) {
                // implement to save connHistory in List
                if (entry.getKey().equals(otherHost)) {
                    Set<DTNHost> hostSet = new HashSet<>();
                    hostSet.add(entry.getKey());
                    connectedHost.add(hostSet);
                }
                break;
            }

            // Iterate over the connection history of the other host
            Iterator<Set<DTNHost>> iterator = connectedHost.iterator();
            while (iterator.hasNext()) {
                Set<DTNHost> contactSet = iterator.next();
                // Check if this host is in contact with the other host
                if (contactSet.contains(thisHost)) { // if j ∈ F(i)
                    // If PeopleRank of other host is greater than or equal to this host
                    System.out.println("cek cok ini contains");
                    if (perOtherHost >= perThisHost) {
                        System.out.println("ini true kont");
                        return true; // Send message to other host
                    } else { // When j is not in F(i)
                        System.out.println("ini false kont");
                        return false; // Do not send message to other host

                    }
                }
            }

        }

        // If the destination host is not in contact with the current host, check the
        Buffer messageBuffer = new Buffer(); // Instantiate Buffer with settings
        int bufferSize = messageBuffer.getBufferSize(thisHost);
        Iterator<Message> bufferIterator = messageBuffer.iterator(); // Get iterator for messages in buffer
        while (bufferSize > 0 && bufferIterator.hasNext()) {
            Message bufferedMessage = bufferIterator.next(); // Get the next message from the buffer
            if (perOtherHost >= perThisHost || otherHost.equals(bufferedMessage.getTo())) {
                return true; // Condition met, return true
            }

        }
        return false; // Otherwise, do not send the message to other host




            // /**
    //  * 
    //  * Method to update total connection history for both hosts
    //  * 
    //  * @param host1
    //  * @param host2
    //  * 
    //  */
    // private void updateTotalConHistory(DTNHost host1, DTNHost host2) {
    //     double time = getPreviousConnectionStartTime(host1, host2);
    //     double etime = SimClock.getTime();
    //     // Update connection history for host1
    //     // Get the connection history list for host1 from the map
    //     List<Duration> history1 = connHistory.get(host1);
    //     // If the history list is null (no existing history), create a new list
    //     if (history1 == null || history1.size() == 0) {
    //         history1 = new ArrayList<>();
    //         // Put the new list into the connection history map for host1
    //         connHistory.put(host1, history1);
    //     }
    //     // Add a new entry representing the start time of the connection to the history
    //     // list
    //     history1.add(new Duration(time, etime));

    //     // Update connection history for host2
    //     // Get the connection history list for host2 from the map
    //     List<Duration> history2 = connHistory.get(host2);
    //     // If the history list is null (no existing history), create a new list
    //     if (history2 == null || history1.size() == 0) {
    //         history2 = new ArrayList<>();
    //         // Put the new list into the connection history map for host2
    //         connHistory.put(host2, history2);
    //     }
    //     // Add a new entry representing the start time of the connection to the history
    //     // list
    //     history2.add(new Duration(time, etime));
    // }



        